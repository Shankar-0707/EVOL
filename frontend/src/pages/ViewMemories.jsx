// src/pages/ViewMemories.jsx
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
Â  ChevronLeft,
Â  Trash2,
Â  Loader2,
Â  CalendarDays,
Â  Heart,
  BookOpen, // Added for View Deleted button
} from "lucide-react";
import { motion, useSpring, useTransform } from "framer-motion";
import toast from "react-hot-toast";
import API from "../utils/api"; // Assuming your global Axios instance is here

// -------------------------------------------------------------------
// --- CUSTOM HOOKS AND ANIMATION COMPONENTS ---
// -------------------------------------------------------------------

// Helper hook to track mouse position for parallax effect
const useMousePosition = () => {
Â  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

Â  useEffect(() => {
Â  Â  const updateMousePosition = (e) => {
Â  Â  Â  const centerX = window.innerWidth / 2;
Â  Â  Â  const centerY = window.innerHeight / 2;

Â  Â  Â  setMousePosition({
Â  Â  Â  Â  x: (e.clientX - centerX) / 100, 
Â  Â  Â  Â  y: (e.clientY - centerY) / 100,
Â  Â  Â  });
Â  Â  };

Â  Â  window.addEventListener("mousemove", updateMousePosition);

Â  Â  return () => {
Â  Â  Â  window.removeEventListener("mousemove", updateMousePosition);
Â  Â  };
Â  }, []);

Â  return mousePosition;
};

// Animation component for the individual dots
const PartnerDot = ({ color, initialX, delay }) => (
Â  <motion.div
Â  Â  className={`w-6 h-6 rounded-full shadow-lg absolute`}
Â  Â  style={{ backgroundColor: color }}
Â  Â  initial={{ x: initialX, opacity: 0 }}
Â  Â  animate={{
Â  Â  Â  x: 0,
Â  Â  Â  opacity: 1,
Â  Â  Â  y: [0, -10, 0], // Gentle vertical movement
Â  Â  }}
Â  Â  transition={{
Â  Â  Â  duration: 3,
Â  Â  Â  delay: delay,
Â  Â  Â  ease: "easeInOut",
Â  Â  Â  repeat: Infinity,
Â  Â  Â  repeatType: "reverse",
Â  Â  Â  times: [0, 0.5, 1],
Â  Â  }}
Â  />
);

// Main Couple Animation using Parallax
const CoupleAnimation = () => {
Â  const { x: mouseX, y: mouseY } = useMousePosition();
Â  const smoothX = useSpring(mouseX, { stiffness: 100, damping: 20 });
Â  const smoothY = useSpring(mouseY, { stiffness: 100, damping: 20 });

Â  const heartX = useTransform(smoothX, (value) => value * 2);
Â  const heartY = useTransform(smoothY, (value) => value * 2);

Â  const containerRotateX = useTransform(smoothY, (value) => value * -0.5);
Â  const containerRotateY = useTransform(smoothX, (value) => value * 0.5);

Â  return (
Â  Â  <motion.div
Â  Â  Â  className="flex justify-center items-center h-40 mb-10 relative perspective-lg"
Â  Â  Â  style={{
Â  Â  Â  Â  rotateX: containerRotateX,
Â  Â  Â  Â  rotateY: containerRotateY,
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  <PartnerDot color="#EC4899" initialX={-100} delay={0} />
Â  Â  Â  <PartnerDot color="#6366F1" initialX={100} delay={0.5} />
Â  Â  Â  <motion.div
Â  Â  Â  Â  className="text-4xl absolute z-10"
Â  Â  Â  Â  style={{ x: heartX, y: heartY }}
Â  Â  Â  Â  initial={{ opacity: 0, scale: 0 }}
Â  Â  Â  Â  animate={{ opacity: 1, scale: 1 }}
Â  Â  Â  Â  transition={{
Â  Â  Â  Â  Â  delay: 0.5,
Â  Â  Â  Â  Â  duration: 0.8,
Â  Â  Â  Â  Â  type: "spring",
Â  Â  Â  Â  Â  stiffness: 150,
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <Heart
Â  Â  Â  Â  Â  size={64}
Â  Â  Â  Â  Â  className="text-red-500 shadow-xl filter drop-shadow-lg"
Â  Â  Â  Â  />
Â  Â  Â  </motion.div>
Â  Â  </motion.div>
Â  );
};


// -------------------------------------------------------------------
// --- MAIN VIEW MEMORIES COMPONENT ---
// -------------------------------------------------------------------

const ViewMemories = () => {
Â  const navigate = useNavigate();
Â  const mousePosition = useMousePosition();

Â  const [memories, setMemories] = useState([]);
Â  const [isLoading, setIsLoading] = useState(true);
Â  const [error, setError] = useState(null);

Â  // --- FETCH ALL MEMORIES FUNCTION ---
Â  const fetchMemories = async () => {
Â  Â  setIsLoading(true);
Â  Â  setError(null);
Â  Â  try {
        // Updated API path based on previous structure: /our-memories/view
Â  Â  Â  const response = await API.get(`/our-memories/view-memories`); 
Â  Â  Â  setMemories(response.data.allMemories);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Fetch Error:", err);
Â  Â  Â  setError("Could not load memories. Check server.");
Â  Â  Â  setMemories([]);
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  fetchMemories();
Â  }, []);

Â  // --- SOFT DELETE MEMORY FUNCTION (Archives the memory) ---
Â  const handleDelete = async (id, title) => {
Â  Â  if (
Â  Â  Â  !window.confirm(`Are you sure you want to archive the memory: "${title}"?`)
Â  Â  ) {
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
        // DELETE request to the soft-delete endpoint
Â  Â  Â  await API.delete(`/our-memories/delete-memory/${id}`); 
Â  Â  Â  setMemories(memories.filter((memory) => memory._id !== id));
Â  Â  Â  toast.success("Memory archived successfully! ðŸ’Œ", {
Â  Â  Â  Â  iconTheme: {
Â  Â  Â  Â  Â  primary: "#ec4899", // pink-500 color
Â  Â  Â  Â  Â  secondary: "#fff",
Â  Â  Â  Â  },
Â  Â  Â  });
Â  Â  } catch (err) {
Â  Â  Â  console.error("Delete Error:", err);
Â  Â  Â  const errorMessage =
Â  Â  Â  Â  err.response?.data?.message || "Failed to archive memory.";
Â  Â  Â  toast.error(`Error: ${errorMessage}`);
Â  Â  }
Â  };

Â  // --- Helper function to format the date ---
Â  const formatDate = (dateString) => {
Â  Â  return new Date(dateString).toLocaleDateString("en-US", {
Â  Â  Â  month: "long",
Â  Â  Â  day: "numeric",
Â  Â  Â  year: "numeric",
Â  Â  });
Â  };

Â  return (
Â  Â  <div className="min-h-full relative overflow-hidden">
Â  Â  Â  {/* ðŸš¨ DYNAMIC BACKGROUND GLOW ðŸš¨ */}
Â  Â  Â  <motion.div
Â  Â  Â  Â  className="fixed inset-0 pointer-events-none z-0"
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  background: `radial-gradient(400px at ${mousePosition.x * 20 + 50}% ${
Â  Â  Â  Â  Â  Â  mousePosition.y * 20 + 50
Â  Â  Â  Â  Â  }%, rgba(236, 72, 153, 0.15) 0%, rgba(255, 255, 255, 0) 100%)`,
Â  Â  Â  Â  Â  transition: "background 0.3s ease-out",
Â  Â  Â  Â  }}
Â  Â  Â  />

Â  Â  Â  <div className="relative z-10">
Â  Â  Â  Â  {/* Header and Control Buttons */}
Â  Â  Â  Â  <header className="flex justify-between items-center mb-8 pb-4 border-b border-gray-200 bg-gray-50/90 backdrop-blur-sm sticky top-0 z-20">
Â  Â  Â  Â  Â  <h1 className="text-4xl sm:text-5xl font-extrabold text-gray-800 tracking-tight">
Â  Â  Â  Â  Â  Â  <span className="text-purple-600">Active</span> Memories
Â  Â  Â  Â  Â  </h1>

Â  Â  Â  Â  Â  <div className="flex space-x-3">
Â  Â  Â  Â  Â  Â  {/* Back to Dashboard Button */}
Â  Â  Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/")}
Â  Â  Â  Â  Â  Â  Â  className="flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-full font-medium hover:bg-gray-300 transition duration-150 shadow-md"
Â  Â  Â  Â  Â  Â  Â  whileHover={{ scale: 1.05 }}
Â  Â  Â  Â  Â  Â  Â  whileTap={{ scale: 0.95 }}
Â  Â  Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <ChevronLeft size={20} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Dashboard
Â  Â  Â  Â  Â  Â  </motion.button>

Â  Â  Â  Â  Â  Â  {/* Add New Memory Button */}
Â  Â  Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/our-memories/add-memory")}
Â  Â  Â  Â  Â  Â  Â  className="flex items-center px-4 py-2 bg-purple-500 text-white rounded-full font-medium hover:bg-purple-600 transition duration-150 shadow-md"
Â  Â  Â  Â  Â  Â  Â  whileHover={{ scale: 1.05 }}
Â  Â  Â  Â  Â  Â  Â  whileTap={{ scale: 0.95 }}
Â  Â  Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <Heart size={20} className="mr-1" />
Â  Â  Â  Â  Â  Â  Â  Add New Memory
Â  Â  Â  Â  Â  Â  </motion.button>
            
            {/* --- NEW BUTTON: VIEW DELETED MEMORIES --- */}
            <motion.button 
                onClick={() => navigate('/our-memories/view-all-deleted-memories')}
                className="flex items-center px-4 py-2 rounded-full font-medium transition duration-150 shadow-lg bg-gray-500 text-white hover:bg-gray-600"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                disabled={isLoading}
            >
                <Trash2 size={20} className="mr-1" />
                Deleted Memories
            </motion.button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </header>

Â  Â  Â  Â  {/* Couple Animation */}
Â  Â  Â  Â  {!isLoading && !error && memories.length > 0 && <CoupleAnimation />}

Â  Â  Â  Â  {/* Memories Grid Content */}
Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  <div className="text-center py-16 text-purple-500">
Â  Â  Â  Â  Â  Â  <Loader2 size={32} className="mx-auto animate-spin mb-3" />
Â  Â  Â  Â  Â  Â  <p className="text-lg font-medium">Fetching beautiful moments...</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ) : error ? (
Â  Â  Â  Â  Â  <div className="text-center py-16 text-red-500 bg-red-100 p-6 rounded-xl border border-red-300">
Â  Â  Â  Â  Â  Â  <p className="text-xl font-semibold">Error:</p>
Â  Â  Â  Â  Â  Â  <p className="mt-2">{error}</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ) : memories.length === 0 ? (
Â  Â  Â  Â  Â  <div className="text-center py-16 text-gray-500 bg-white p-6 rounded-xl shadow-lg">
Â  Â  Â  Â  Â  Â  <p className="text-lg">No shared memories yet! Let's make some.</p>
Â  Â  Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/add-memories")}
Â  Â  Â  Â  Â  Â  Â  className="mt-4 px-6 py-2 bg-purple-500 text-white rounded-full hover:bg-purple-600 transition"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Add First Memory
Â  Â  Â  Â  Â  Â  </motion.button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  {memories.map((memory, index) => (
Â  Â  Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  Â  Â  key={memory._id}
Â  Â  Â  Â  Â  Â  Â  Â  className="bg-white p-6 rounded-2xl shadow-xl border-t-4 border-pink-400 flex flex-col hover:shadow-2xl transition duration-300 transform hover:scale-[1.02]"
Â  Â  Â  Â  Â  Â  Â  Â  initial={{ opacity: 0, y: 50 }}
Â  Â  Â  Â  Â  Â  Â  Â  animate={{ opacity: 1, y: 0 }}
Â  Â  Â  Â  Â  Â  Â  Â  transition={{ delay: 0.1 * index }} // Staggered entry animation
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-extrabold text-gray-800 mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {memory.title}
Â  Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-pink-600 mb-4 flex items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <CalendarDays size={16} className="mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  {formatDate(memory.date)}
Â  Â  Â  Â  Â  Â  Â  Â  </p>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-grow text-gray-700 mb-4 border-l-4 border-purple-200 max-h-32 pl-3 italic overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  "{memory.description}"
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="mt-4 pt-3 border-t border-gray-100 flex justify-between items-center">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Added by:{" "}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="font-semibold text-purple-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {memory.addedBy}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDelete(memory._id, memory.title)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-500 p-2 rounded-full hover:bg-red-100 transition duration-150"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  whileHover={{ scale: 1.1 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  whileTap={{ scale: 0.9 }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Trash2 size={20} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </motion.button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default ViewMemories;